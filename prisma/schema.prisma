// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"           
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String   // IMPORTANT: This should be a HASHED password, never store plaintext!
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events Event[]
  tasks  Task[]
}

// Event model: Represents scheduled items on the calendar.
model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  color       String    @default("#000000")
  isRescheduable      Boolean   @default(false)
  tags        String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Task model: Represents items in a to-do list.
model Task {
  id      String     @id @default(cuid())
  title   String
  description String?
  expectedTime Int
  priority PriorityLevel
  status  TaskStatus @default(NOT_STARTED) // Uses the TaskStatus enum below for type safety.
  dueDate DateTime 
  tags    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enum for Task Status: Restricts the 'status' field to only these values.
enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum PriorityLevel {
  LOW
  MEDIUM
  HIGH
}